# Generated by Django 5.2.6 on 2025-09-07 08:39

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Permission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "codename",
                    models.CharField(
                        help_text="Unique permission identifier",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable permission name", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of what this permission allows",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        default="general",
                        help_text="Permission category for organization",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Permission",
                "verbose_name_plural": "Permissions",
                "db_table": "user_permissions",
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(max_length=30)),
                ("last_name", models.CharField(max_length=30)),
                ("is_organizer", models.BooleanField(default=True)),
                ("is_email_verified", models.BooleanField(default=False)),
                ("is_phone_verified", models.BooleanField(default=False)),
                ("is_mfa_enabled", models.BooleanField(default=False)),
                (
                    "account_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("suspended", "Suspended"),
                            ("pending_verification", "Pending Verification"),
                            ("password_expired", "Password Expired"),
                            (
                                "password_expired_grace_period",
                                "Password Expired (Grace Period)",
                            ),
                        ],
                        default="pending_verification",
                        max_length=50,
                    ),
                ),
                ("password_changed_at", models.DateTimeField(blank=True, null=True)),
                ("password_expires_at", models.DateTimeField(blank=True, null=True)),
                ("failed_login_attempts", models.IntegerField(default=0)),
                ("locked_until", models.DateTimeField(blank=True, null=True)),
                (
                    "mfa_secret",
                    models.CharField(
                        blank=True, help_text="TOTP secret key", max_length=32
                    ),
                ),
                (
                    "mfa_backup_codes",
                    models.JSONField(
                        blank=True, default=list, help_text="List of backup codes"
                    ),
                ),
                (
                    "mfa_last_used_code",
                    models.CharField(
                        blank=True, help_text="Last used backup code", max_length=10
                    ),
                ),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="EmailVerificationToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("token", models.CharField(max_length=64, unique=True)),
                (
                    "token_type",
                    models.CharField(
                        choices=[
                            ("email_verification", "Email Verification"),
                            ("email_change", "Email Change"),
                        ],
                        default="email_verification",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_verification_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Verification Token",
                "verbose_name_plural": "Email Verification Tokens",
                "db_table": "email_verification_tokens",
            },
        ),
        migrations.CreateModel(
            name="PasswordHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("password_hash", models.CharField(max_length=128)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Password History",
                "verbose_name_plural": "Password History",
                "db_table": "password_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("token", models.CharField(max_length=64, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                ("created_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("used_ip", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Password Reset Token",
                "verbose_name_plural": "Password Reset Tokens",
                "db_table": "password_reset_tokens",
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "organizer_slug",
                    models.SlugField(blank=True, max_length=100, unique=True),
                ),
                ("display_name", models.CharField(blank=True, max_length=100)),
                ("bio", models.TextField(blank=True)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_pictures/"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("website", models.URLField(blank=True)),
                ("company", models.CharField(blank=True, max_length=100)),
                ("job_title", models.CharField(blank=True, max_length=100)),
                ("timezone_name", models.CharField(default="UTC", max_length=50)),
                ("language", models.CharField(default="en", max_length=10)),
                ("date_format", models.CharField(default="MM/DD/YYYY", max_length=20)),
                ("time_format", models.CharField(default="12h", max_length=10)),
                ("brand_color", models.CharField(default="#0066cc", max_length=7)),
                (
                    "brand_logo",
                    models.ImageField(blank=True, null=True, upload_to="brand_logos/"),
                ),
                ("public_profile", models.BooleanField(default=True)),
                ("show_phone", models.BooleanField(default=False)),
                ("show_email", models.BooleanField(default=True)),
                (
                    "reasonable_hours_start",
                    models.IntegerField(
                        default=7,
                        help_text="Start of reasonable hours for multi-invitee scheduling (24-hour format)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(23),
                        ],
                    ),
                ),
                (
                    "reasonable_hours_end",
                    models.IntegerField(
                        default=22,
                        help_text="End of reasonable hours for multi-invitee scheduling (24-hour format)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(24),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Profile",
                "verbose_name_plural": "Profiles",
                "db_table": "user_profiles",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "role_type",
                    models.CharField(
                        choices=[
                            ("admin", "Administrator"),
                            ("organizer", "Organizer"),
                            ("team_member", "Team Member"),
                            ("billing_manager", "Billing Manager"),
                            ("viewer", "Viewer"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "is_system_role",
                    models.BooleanField(
                        default=False, help_text="System roles cannot be deleted"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent role for inheritance",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="users.role",
                    ),
                ),
                (
                    "role_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Permissions directly assigned to this role",
                        related_name="roles",
                        to="users.permission",
                    ),
                ),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "db_table": "user_roles",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="OIDCConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("organization_name", models.CharField(max_length=200)),
                ("organization_domain", models.CharField(max_length=100, unique=True)),
                ("issuer", models.URLField(help_text="OIDC Issuer URL")),
                ("client_id", models.CharField(max_length=200)),
                ("client_secret", models.CharField(max_length=500)),
                ("authorization_endpoint", models.URLField(blank=True)),
                ("token_endpoint", models.URLField(blank=True)),
                ("userinfo_endpoint", models.URLField(blank=True)),
                ("jwks_uri", models.URLField(blank=True)),
                (
                    "scopes",
                    models.JSONField(
                        default=list, help_text="List of requested scopes"
                    ),
                ),
                ("email_claim", models.CharField(default="email", max_length=100)),
                (
                    "first_name_claim",
                    models.CharField(default="given_name", max_length=100),
                ),
                (
                    "last_name_claim",
                    models.CharField(default="family_name", max_length=100),
                ),
                ("role_claim", models.CharField(blank=True, max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("auto_provision_users", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "default_role",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "OIDC Configuration",
                "verbose_name_plural": "OIDC Configurations",
                "db_table": "oidc_configurations",
            },
        ),
        migrations.AddField(
            model_name="user",
            name="roles",
            field=models.ManyToManyField(
                blank=True, related_name="users", to="users.role"
            ),
        ),
        migrations.CreateModel(
            name="SAMLConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("organization_name", models.CharField(max_length=200)),
                ("organization_domain", models.CharField(max_length=100, unique=True)),
                ("entity_id", models.URLField(help_text="Identity Provider Entity ID")),
                ("sso_url", models.URLField(help_text="Single Sign-On URL")),
                ("slo_url", models.URLField(blank=True, help_text="Single Logout URL")),
                ("x509_cert", models.TextField(help_text="X.509 Certificate")),
                ("email_attribute", models.CharField(default="email", max_length=100)),
                (
                    "first_name_attribute",
                    models.CharField(default="first_name", max_length=100),
                ),
                (
                    "last_name_attribute",
                    models.CharField(default="last_name", max_length=100),
                ),
                (
                    "role_attribute",
                    models.CharField(
                        blank=True,
                        help_text="Attribute for role mapping",
                        max_length=100,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "auto_provision_users",
                    models.BooleanField(
                        default=True, help_text="Create users automatically via JIT"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "default_role",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "SAML Configuration",
                "verbose_name_plural": "SAML Configurations",
                "db_table": "saml_configurations",
            },
        ),
        migrations.CreateModel(
            name="SSOSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "sso_type",
                    models.CharField(
                        choices=[
                            ("saml", "SAML"),
                            ("oidc", "OpenID Connect"),
                            ("oauth", "OAuth"),
                        ],
                        max_length=20,
                    ),
                ),
                ("provider_name", models.CharField(max_length=100)),
                ("external_session_id", models.CharField(blank=True, max_length=200)),
                ("session_key", models.CharField(max_length=40)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sso_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "SSO Session",
                "verbose_name_plural": "SSO Sessions",
                "db_table": "sso_sessions",
                "ordering": ["-last_activity"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_key", models.CharField(max_length=40, unique=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        help_text="Country from IP geolocation",
                        max_length=100,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, help_text="City from IP geolocation", max_length=100
                    ),
                ),
                ("device_info", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="active_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "db_table": "user_sessions",
                "ordering": ["-last_activity"],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("login_failed", "Login Failed"),
                            ("password_changed", "Password Changed"),
                            ("password_reset_requested", "Password Reset Requested"),
                            ("password_reset_completed", "Password Reset Completed"),
                            (
                                "password_expiry_warning_sent",
                                "Password Expiry Warning Sent",
                            ),
                            ("forced_password_change", "Forced Password Change"),
                            (
                                "password_grace_period_expired",
                                "Password Grace Period Expired",
                            ),
                            ("email_verified", "Email Verified"),
                            ("profile_updated", "Profile Updated"),
                            ("role_assigned", "Role Assigned"),
                            ("role_removed", "Role Removed"),
                            ("account_locked", "Account Locked"),
                            ("account_unlocked", "Account Unlocked"),
                            ("mfa_enabled", "MFA Enabled"),
                            ("mfa_disabled", "MFA Disabled"),
                            ("invitation_sent", "Invitation Sent"),
                            ("invitation_accepted", "Invitation Accepted"),
                        ],
                        max_length=30,
                    ),
                ),
                ("description", models.TextField()),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("session_key", models.CharField(blank=True, max_length=40)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional context data"
                    ),
                ),
                ("object_id", models.UUIDField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Log",
                "verbose_name_plural": "Audit Logs",
                "db_table": "user_audit_logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-created_at"],
                        name="user_audit__user_id_096920_idx",
                    ),
                    models.Index(
                        fields=["action", "-created_at"],
                        name="user_audit__action_b83df9_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "-created_at"],
                        name="user_audit__ip_addr_d547d7_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="MFADevice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("totp", "TOTP Authenticator"),
                            ("sms", "SMS"),
                            ("backup", "Backup Codes"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="User-friendly device name", max_length=100
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, help_text="For SMS devices", max_length=20
                    ),
                ),
                (
                    "verification_attempts",
                    models.IntegerField(
                        default=0, help_text="Number of verification attempts"
                    ),
                ),
                (
                    "last_verification_attempt",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_primary",
                    models.BooleanField(default=False, help_text="Primary MFA device"),
                ),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mfa_devices",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "MFA Device",
                "verbose_name_plural": "MFA Devices",
                "db_table": "mfa_devices",
                "unique_together": {("user", "device_type", "is_primary")},
            },
        ),
        migrations.CreateModel(
            name="Invitation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("invited_email", models.EmailField(max_length=254)),
                ("token", models.CharField(max_length=64, unique=True)),
                ("message", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("declined", "Declined"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "accepted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="accepted_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.role"
                    ),
                ),
            ],
            options={
                "verbose_name": "Invitation",
                "verbose_name_plural": "Invitations",
                "db_table": "user_invitations",
                "unique_together": {("invited_by", "invited_email", "status")},
            },
        ),
    ]
