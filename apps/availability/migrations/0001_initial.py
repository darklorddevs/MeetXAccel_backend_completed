# Generated by Django 5.2.6 on 2025-09-07 08:39

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AvailabilityRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "day_of_week",
                    models.IntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ]
                    ),
                ),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Availability Rule",
                "verbose_name_plural": "Availability Rules",
                "db_table": "availability_rules",
            },
        ),
        migrations.CreateModel(
            name="BlockedTime",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("start_datetime", models.DateTimeField()),
                ("end_datetime", models.DateTimeField()),
                ("reason", models.CharField(blank=True, max_length=200)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("manual", "Manual"),
                            ("google_calendar", "Google Calendar"),
                            ("outlook_calendar", "Outlook Calendar"),
                            ("apple_calendar", "Apple Calendar"),
                            ("external_sync", "External Sync"),
                        ],
                        default="manual",
                        max_length=20,
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        help_text="ID from external calendar system",
                        max_length=200,
                    ),
                ),
                (
                    "external_updated_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last updated time from external system",
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Blocked Time",
                "verbose_name_plural": "Blocked Times",
                "db_table": "blocked_times",
            },
        ),
        migrations.CreateModel(
            name="BufferTime",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "default_buffer_before",
                    models.IntegerField(
                        default=0,
                        help_text="Default buffer time before meetings (minutes)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "default_buffer_after",
                    models.IntegerField(
                        default=0,
                        help_text="Default buffer time after meetings (minutes)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "minimum_gap",
                    models.IntegerField(
                        default=0,
                        help_text="Minimum gap between bookings (minutes)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(60),
                        ],
                    ),
                ),
                (
                    "slot_interval_minutes",
                    models.IntegerField(
                        default=15,
                        help_text="Interval for generating time slots (minutes)",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(60),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Buffer Time Settings",
                "verbose_name_plural": "Buffer Time Settings",
                "db_table": "buffer_times",
            },
        ),
        migrations.CreateModel(
            name="DateOverrideRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField()),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="If False, entire day is blocked"
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        blank=True,
                        help_text="Required if is_available is True",
                        null=True,
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True,
                        help_text="Required if is_available is True",
                        null=True,
                    ),
                ),
                ("reason", models.CharField(blank=True, max_length=200)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Date Override Rule",
                "verbose_name_plural": "Date Override Rules",
                "db_table": "date_override_rules",
            },
        ),
        migrations.CreateModel(
            name="RecurringBlockedTime",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the recurring block (e.g., 'Weekly Team Meeting')",
                        max_length=200,
                    ),
                ),
                (
                    "day_of_week",
                    models.IntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ]
                    ),
                ),
                ("start_time", models.TimeField()),
                (
                    "end_time",
                    models.TimeField(
                        help_text="Can be earlier than start_time to span midnight"
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="When this recurring block starts (None = indefinite start)",
                        null=True,
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="When this recurring block ends (None = indefinite end)",
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Recurring Blocked Time",
                "verbose_name_plural": "Recurring Blocked Times",
                "db_table": "recurring_blocked_times",
            },
        ),
    ]
