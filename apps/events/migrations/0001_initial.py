# Generated by Django 5.2.6 on 2025-09-07 08:39

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Attendee",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("confirmed", "Confirmed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                        ],
                        default="confirmed",
                        max_length=20,
                    ),
                ),
                ("custom_answers", models.JSONField(blank=True, default=dict)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("cancellation_reason", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Attendee",
                "verbose_name_plural": "Attendees",
                "db_table": "booking_attendees",
            },
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("invitee_name", models.CharField(max_length=200)),
                ("invitee_email", models.EmailField(max_length=254)),
                ("invitee_phone", models.CharField(blank=True, max_length=20)),
                ("invitee_timezone", models.CharField(default="UTC", max_length=50)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("confirmed", "Confirmed"),
                            ("cancelled", "Cancelled"),
                            ("rescheduled", "Rescheduled"),
                            ("completed", "Completed"),
                            ("no_show", "No Show"),
                        ],
                        default="confirmed",
                        max_length=20,
                    ),
                ),
                (
                    "attendee_count",
                    models.IntegerField(
                        default=1,
                        help_text="Number of attendees for this specific booking",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "recurrence_id",
                    models.UUIDField(
                        blank=True,
                        help_text="Links recurring bookings together",
                        null=True,
                    ),
                ),
                (
                    "is_recurring_exception",
                    models.BooleanField(
                        default=False,
                        help_text="True if this booking is an exception to a recurring series",
                    ),
                ),
                (
                    "recurrence_sequence",
                    models.IntegerField(
                        blank=True,
                        help_text="Sequence number in recurring series",
                        null=True,
                    ),
                ),
                (
                    "access_token",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Secure token for invitee booking management",
                        unique=True,
                    ),
                ),
                (
                    "access_token_expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Expiration time for access token",
                        null=True,
                    ),
                ),
                ("custom_answers", models.JSONField(blank=True, default=dict)),
                ("meeting_link", models.URLField(blank=True)),
                ("meeting_id", models.CharField(blank=True, max_length=100)),
                ("meeting_password", models.CharField(blank=True, max_length=50)),
                (
                    "external_calendar_event_id",
                    models.CharField(
                        blank=True,
                        help_text="ID from external calendar system",
                        max_length=200,
                    ),
                ),
                (
                    "calendar_sync_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("succeeded", "Succeeded"),
                            ("failed", "Failed"),
                            ("not_required", "Not Required"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("calendar_sync_error", models.TextField(blank=True)),
                ("calendar_sync_attempts", models.IntegerField(default=0)),
                (
                    "last_calendar_sync_attempt",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                (
                    "cancelled_by",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("organizer", "Organizer"),
                            ("invitee", "Invitee"),
                            ("system", "System"),
                        ],
                        max_length=20,
                    ),
                ),
                ("cancellation_reason", models.TextField(blank=True)),
                ("rescheduled_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Booking",
                "verbose_name_plural": "Bookings",
                "db_table": "bookings",
            },
        ),
        migrations.CreateModel(
            name="BookingAuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("booking_created", "Booking Created"),
                            ("booking_cancelled", "Booking Cancelled"),
                            ("booking_rescheduled", "Booking Rescheduled"),
                            ("booking_completed", "Booking Completed"),
                            ("attendee_added", "Attendee Added"),
                            ("attendee_cancelled", "Attendee Cancelled"),
                            ("waitlist_added", "Added to Waitlist"),
                            ("waitlist_converted", "Waitlist Converted"),
                            ("calendar_sync_success", "Calendar Sync Success"),
                            ("calendar_sync_failed", "Calendar Sync Failed"),
                            ("workflow_triggered", "Workflow Triggered"),
                            ("notification_sent", "Notification Sent"),
                            ("access_token_regenerated", "Access Token Regenerated"),
                        ],
                        max_length=30,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "actor_type",
                    models.CharField(
                        choices=[
                            ("organizer", "Organizer"),
                            ("invitee", "Invitee"),
                            ("attendee", "Attendee"),
                            ("system", "System"),
                            ("integration", "Integration"),
                        ],
                        max_length=20,
                    ),
                ),
                ("actor_email", models.EmailField(blank=True, max_length=254)),
                ("actor_name", models.CharField(blank=True, max_length=200)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional context data"
                    ),
                ),
                ("old_values", models.JSONField(blank=True, default=dict)),
                ("new_values", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Booking Audit Log",
                "verbose_name_plural": "Booking Audit Logs",
                "db_table": "booking_audit_logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question_text", models.CharField(max_length=500)),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Input"),
                            ("textarea", "Long Text"),
                            ("select", "Single Select"),
                            ("multiselect", "Multiple Select"),
                            ("checkbox", "Checkbox"),
                            ("radio", "Radio Buttons"),
                            ("email", "Email"),
                            ("phone", "Phone Number"),
                            ("number", "Number"),
                            ("date", "Date"),
                            ("time", "Time"),
                            ("url", "URL"),
                        ],
                        default="text",
                        max_length=20,
                    ),
                ),
                ("is_required", models.BooleanField(default=False)),
                ("order", models.IntegerField(default=0)),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of options for select/radio questions",
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Conditions for showing this question based on previous answers",
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Validation rules (min_length, max_length, pattern, etc.)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Custom Question",
                "verbose_name_plural": "Custom Questions",
                "db_table": "custom_questions",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="EventType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("event_type_slug", models.SlugField(blank=True, max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "duration",
                    models.IntegerField(
                        choices=[
                            (15, "15 minutes"),
                            (30, "30 minutes"),
                            (45, "45 minutes"),
                            (60, "1 hour"),
                            (90, "1.5 hours"),
                            (120, "2 hours"),
                            (180, "3 hours"),
                            (240, "4 hours"),
                        ],
                        default=30,
                    ),
                ),
                (
                    "max_attendees",
                    models.IntegerField(
                        default=1,
                        help_text="Maximum number of attendees for this event type",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "enable_waitlist",
                    models.BooleanField(
                        default=False, help_text="Allow waitlist when event is full"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_private",
                    models.BooleanField(
                        default=False,
                        help_text="Private events are only accessible via direct link",
                    ),
                ),
                (
                    "min_scheduling_notice",
                    models.IntegerField(
                        default=60,
                        help_text="Minimum booking notice (minutes)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "max_scheduling_horizon",
                    models.IntegerField(
                        default=43200,
                        help_text="Maximum booking advance (minutes)",
                        validators=[django.core.validators.MinValueValidator(60)],
                    ),
                ),
                (
                    "buffer_time_before",
                    models.IntegerField(
                        default=0,
                        help_text="Buffer time before meeting (minutes)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "buffer_time_after",
                    models.IntegerField(
                        default=0,
                        help_text="Buffer time after meeting (minutes)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "max_bookings_per_day",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum bookings per day for this event type",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "slot_interval_minutes",
                    models.IntegerField(
                        default=0,
                        help_text="Slot interval for this event type (minutes). 0 uses organizer's default.",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(60),
                        ],
                    ),
                ),
                (
                    "recurrence_type",
                    models.CharField(
                        choices=[
                            ("none", "No Recurrence"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="none",
                        max_length=20,
                    ),
                ),
                (
                    "recurrence_rule",
                    models.TextField(
                        blank=True,
                        help_text="RRULE string for complex recurrence patterns",
                    ),
                ),
                (
                    "max_occurrences",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum number of recurring occurrences",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(365),
                        ],
                    ),
                ),
                (
                    "recurrence_end_date",
                    models.DateField(
                        blank=True, help_text="End date for recurring events", null=True
                    ),
                ),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("video_call", "Video Call"),
                            ("phone_call", "Phone Call"),
                            ("in_person", "In Person"),
                            ("custom", "Custom"),
                        ],
                        default="video_call",
                        max_length=20,
                    ),
                ),
                (
                    "location_details",
                    models.TextField(
                        blank=True,
                        help_text="Location details (address, phone number, or custom instructions)",
                    ),
                ),
                (
                    "redirect_url_after_booking",
                    models.URLField(
                        blank=True,
                        help_text="URL to redirect invitee after successful booking",
                    ),
                ),
                ("custom_questions", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Event Type",
                "verbose_name_plural": "Event Types",
                "db_table": "event_types",
            },
        ),
        migrations.CreateModel(
            name="EventTypeAvailabilityCache",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField()),
                ("timezone_name", models.CharField(max_length=50)),
                ("attendee_count", models.IntegerField(default=1)),
                (
                    "available_slots",
                    models.JSONField(help_text="Serialized available slots"),
                ),
                ("computed_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "is_dirty",
                    models.BooleanField(
                        default=False, help_text="True if cache needs recomputation"
                    ),
                ),
                (
                    "computation_time_ms",
                    models.IntegerField(
                        blank=True,
                        help_text="Time taken to compute this cache entry",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Availability Cache",
                "verbose_name_plural": "Availability Cache",
                "db_table": "event_type_availability_cache",
            },
        ),
        migrations.CreateModel(
            name="RecurringEventException",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "recurrence_id",
                    models.UUIDField(help_text="Links to the recurring series"),
                ),
                ("exception_date", models.DateField()),
                (
                    "exception_type",
                    models.CharField(
                        choices=[
                            ("cancelled", "Cancelled"),
                            ("rescheduled", "Rescheduled"),
                            ("modified", "Modified"),
                        ],
                        max_length=20,
                    ),
                ),
                ("new_start_time", models.DateTimeField(blank=True, null=True)),
                ("new_end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "modified_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Fields that were modified for this occurrence",
                    ),
                ),
                ("reason", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Recurring Event Exception",
                "verbose_name_plural": "Recurring Event Exceptions",
                "db_table": "recurring_event_exceptions",
            },
        ),
        migrations.CreateModel(
            name="WaitlistEntry",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("desired_start_time", models.DateTimeField()),
                ("desired_end_time", models.DateTimeField()),
                ("invitee_name", models.CharField(max_length=200)),
                ("invitee_email", models.EmailField(max_length=254)),
                ("invitee_phone", models.CharField(blank=True, max_length=20)),
                ("invitee_timezone", models.CharField(default="UTC", max_length=50)),
                ("notify_when_available", models.BooleanField(default=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this waitlist entry expires"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("notified", "Notified"),
                            ("converted", "Converted to Booking"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("custom_answers", models.JSONField(blank=True, default=dict)),
                ("notified_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Waitlist Entry",
                "verbose_name_plural": "Waitlist Entries",
                "db_table": "waitlist_entries",
                "ordering": ["created_at"],
            },
        ),
    ]
