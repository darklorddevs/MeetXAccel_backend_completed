# Generated by Django 5.2.6 on 2025-09-07 08:39

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("events", "0001_initial"),
        ("workflows", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="booking",
            name="organizer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="organized_bookings",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="rescheduled_from",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="rescheduled_to_bookings",
                to="events.booking",
            ),
        ),
        migrations.AddField(
            model_name="attendee",
            name="booking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="attendees",
                to="events.booking",
            ),
        ),
        migrations.AddField(
            model_name="bookingauditlog",
            name="booking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="audit_logs",
                to="events.booking",
            ),
        ),
        migrations.AddField(
            model_name="eventtype",
            name="cancellation_workflow",
            field=models.ForeignKey(
                blank=True,
                help_text="Workflow to trigger on cancellation",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cancellation_event_types",
                to="workflows.workflow",
            ),
        ),
        migrations.AddField(
            model_name="eventtype",
            name="confirmation_workflow",
            field=models.ForeignKey(
                blank=True,
                help_text="Workflow to trigger on booking confirmation",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="confirmation_event_types",
                to="workflows.workflow",
            ),
        ),
        migrations.AddField(
            model_name="eventtype",
            name="organizer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="event_types",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="eventtype",
            name="reminder_workflow",
            field=models.ForeignKey(
                blank=True,
                help_text="Workflow to trigger for reminders",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reminder_event_types",
                to="workflows.workflow",
            ),
        ),
        migrations.AddField(
            model_name="customquestion",
            name="event_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="events.eventtype",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="event_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bookings",
                to="events.eventtype",
            ),
        ),
        migrations.AddField(
            model_name="eventtypeavailabilitycache",
            name="event_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="availability_cache",
                to="events.eventtype",
            ),
        ),
        migrations.AddField(
            model_name="eventtypeavailabilitycache",
            name="organizer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="availability_cache",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="recurringeventexception",
            name="event_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recurrence_exceptions",
                to="events.eventtype",
            ),
        ),
        migrations.AddField(
            model_name="waitlistentry",
            name="converted_booking",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="converted_from_waitlist",
                to="events.booking",
            ),
        ),
        migrations.AddField(
            model_name="waitlistentry",
            name="event_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="waitlist_entries",
                to="events.eventtype",
            ),
        ),
        migrations.AddField(
            model_name="waitlistentry",
            name="organizer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="waitlist_entries",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="attendee",
            unique_together={("booking", "email")},
        ),
        migrations.AddIndex(
            model_name="bookingauditlog",
            index=models.Index(
                fields=["booking", "-created_at"], name="booking_aud_booking_2049d5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookingauditlog",
            index=models.Index(
                fields=["action", "-created_at"], name="booking_aud_action_f84560_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookingauditlog",
            index=models.Index(
                fields=["actor_type", "-created_at"],
                name="booking_aud_actor_t_53597d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="eventtype",
            index=models.Index(
                fields=["organizer", "is_active", "is_private"],
                name="event_types_organiz_825f43_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="eventtype",
            index=models.Index(
                fields=["event_type_slug"], name="event_types_event_t_edcc8f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="eventtype",
            unique_together={("organizer", "event_type_slug")},
        ),
        migrations.AlterUniqueTogether(
            name="customquestion",
            unique_together={("event_type", "order")},
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["organizer", "start_time", "end_time"],
                name="bookings_organiz_98cf4f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["status", "start_time"], name="bookings_status_28164a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["access_token"], name="bookings_access__c741f3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["recurrence_id"], name="bookings_recurre_52c874_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["calendar_sync_status"], name="bookings_calenda_a99e8d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventtypeavailabilitycache",
            index=models.Index(
                fields=["expires_at"], name="event_type__expires_7f3fbb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventtypeavailabilitycache",
            index=models.Index(
                fields=["is_dirty"], name="event_type__is_dirt_d8a3c1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventtypeavailabilitycache",
            index=models.Index(
                fields=["organizer", "date"], name="event_type__organiz_050dac_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="eventtypeavailabilitycache",
            unique_together={
                ("organizer", "event_type", "date", "timezone_name", "attendee_count")
            },
        ),
        migrations.AlterUniqueTogether(
            name="recurringeventexception",
            unique_together={("event_type", "recurrence_id", "exception_date")},
        ),
        migrations.AddIndex(
            model_name="waitlistentry",
            index=models.Index(
                fields=["event_type", "status", "desired_start_time"],
                name="waitlist_en_event_t_4a692c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="waitlistentry",
            index=models.Index(
                fields=["expires_at"], name="waitlist_en_expires_8cd12e_idx"
            ),
        ),
    ]
